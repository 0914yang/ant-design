// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input allowClear should change type when click 1`] = `
<Input
  allowClear={true}
  disabled={false}
  type="text"
>
  <Consumer>
    <span
      className="ant-input-affix-wrapper"
    >
      <input
        className="ant-input"
        disabled={false}
        onChange={[Function]}
        onKeyDown={[Function]}
        style={null}
        type="text"
        value="111"
      />
      <span
        className="ant-input-suffix"
      >
        <Icon
          className="ant-input-clear-icon"
          onClick={[Function]}
          role="button"
          theme="filled"
          type="close-circle"
        >
          <LocaleReceiver
            componentName="Icon"
          >
            <i
              aria-label="icon: close-circle"
              className="anticon anticon-close-circle ant-input-clear-icon"
              onClick={[Function]}
              role="button"
              tabIndex={-1}
            >
              <svg
                aria-hidden="true"
                className=""
                fill="currentColor"
                focusable="false"
                height="1em"
                width="1em"
              >
                <use
                  xlinkHref="#close-circle"
                />
              </svg>
            </i>
          </LocaleReceiver>
        </Icon>
      </span>
    </span>
  </Consumer>
</Input>
`;

exports[`Input allowClear should change type when click 2`] = `
<Input
  allowClear={true}
  disabled={false}
  type="text"
>
  <Consumer>
    <span
      className="ant-input-affix-wrapper"
    >
      <input
        className="ant-input"
        disabled={false}
        onChange={[Function]}
        onKeyDown={[Function]}
        style={null}
        type="text"
        value=""
      />
      <span
        className="ant-input-suffix"
      />
    </span>
  </Consumer>
</Input>
`;

exports[`Input allowClear should not show icon if defaultValue is undefined, null or empty string 1`] = `
<Input
  allowClear={true}
  defaultValue={null}
  disabled={false}
  type="text"
>
  <Consumer>
    <span
      className="ant-input-affix-wrapper"
    >
      <input
        className="ant-input"
        disabled={false}
        onChange={[Function]}
        onKeyDown={[Function]}
        style={null}
        type="text"
        value=""
      />
      <span
        className="ant-input-suffix"
      />
    </span>
  </Consumer>
</Input>
`;

exports[`Input allowClear should not show icon if defaultValue is undefined, null or empty string 2`] = `
<Input
  allowClear={true}
  disabled={false}
  type="text"
>
  <Consumer>
    <span
      className="ant-input-affix-wrapper"
    >
      <input
        className="ant-input"
        disabled={false}
        onChange={[Function]}
        onKeyDown={[Function]}
        style={null}
        type="text"
        value=""
      />
      <span
        className="ant-input-suffix"
      />
    </span>
  </Consumer>
</Input>
`;

exports[`Input allowClear should not show icon if defaultValue is undefined, null or empty string 3`] = `
<Input
  allowClear={true}
  defaultValue=""
  disabled={false}
  type="text"
>
  <Consumer>
    <span
      className="ant-input-affix-wrapper"
    >
      <input
        className="ant-input"
        disabled={false}
        onChange={[Function]}
        onKeyDown={[Function]}
        style={null}
        type="text"
        value=""
      />
      <span
        className="ant-input-suffix"
      />
    </span>
  </Consumer>
</Input>
`;

exports[`Input allowClear should not show icon if value is undefined, null or empty string 1`] = `
<Input
  allowClear={true}
  disabled={false}
  type="text"
  value={null}
>
  <Consumer>
    <span
      className="ant-input-affix-wrapper"
    >
      <input
        className="ant-input"
        disabled={false}
        onChange={[Function]}
        onKeyDown={[Function]}
        style={null}
        type="text"
        value=""
      />
      <span
        className="ant-input-suffix"
      />
    </span>
  </Consumer>
</Input>
`;

exports[`Input allowClear should not show icon if value is undefined, null or empty string 2`] = `
<Input
  allowClear={true}
  disabled={false}
  type="text"
>
  <Consumer>
    <span
      className="ant-input-affix-wrapper"
    >
      <input
        className="ant-input"
        disabled={false}
        onChange={[Function]}
        onKeyDown={[Function]}
        style={null}
        type="text"
        value=""
      />
      <span
        className="ant-input-suffix"
      />
    </span>
  </Consumer>
</Input>
`;

exports[`Input allowClear should not show icon if value is undefined, null or empty string 3`] = `
<Input
  allowClear={true}
  disabled={false}
  type="text"
  value=""
>
  <Consumer>
    <span
      className="ant-input-affix-wrapper"
    >
      <input
        className="ant-input"
        disabled={false}
        onChange={[Function]}
        onKeyDown={[Function]}
        style={null}
        type="text"
        value=""
      />
      <span
        className="ant-input-suffix"
      />
    </span>
  </Consumer>
</Input>
`;

exports[`Input should support maxLength 1`] = `
<Input
  disabled={false}
  maxLength={3}
  type="text"
>
  <Consumer>
    <input
      className="ant-input"
      disabled={false}
      maxLength={3}
      onChange={[Function]}
      onKeyDown={[Function]}
      type="text"
      value=""
    />
  </Consumer>
</Input>
`;

exports[`Input.Password should change type when click 1`] = `
<Password
  action="click"
  inputPrefixCls="ant-input"
  prefixCls="ant-input-password"
  visibilityToggle={true}
>
  <Input
    action="click"
    className="ant-input-password"
    disabled={false}
    prefixCls="ant-input"
    suffix={
      <Icon
        className="ant-input-password-icon"
        onClick={[Function]}
        type="eye"
      />
    }
    type="password"
  >
    <Consumer>
      <span
        className="ant-input-password ant-input-affix-wrapper"
      >
        <input
          action="click"
          className="ant-input"
          disabled={false}
          onChange={[Function]}
          onKeyDown={[Function]}
          style={null}
          type="password"
          value="111"
        />
        <span
          className="ant-input-suffix"
        >
          <Icon
            className="ant-input-password-icon"
            key="passwordIcon"
            onClick={[Function]}
            type="eye"
          >
            <LocaleReceiver
              componentName="Icon"
            >
              <i
                aria-label="icon: eye"
                className="anticon anticon-eye ant-input-password-icon"
                onClick={[Function]}
                tabIndex={-1}
              >
                <svg
                  aria-hidden="true"
                  className=""
                  fill="currentColor"
                  focusable="false"
                  height="1em"
                  width="1em"
                >
                  <use
                    xlinkHref="#eye"
                  />
                </svg>
              </i>
            </LocaleReceiver>
          </Icon>
        </span>
      </span>
    </Consumer>
  </Input>
</Password>
`;

exports[`Input.Password should change type when click 2`] = `
<Password
  action="click"
  inputPrefixCls="ant-input"
  prefixCls="ant-input-password"
  visibilityToggle={true}
>
  <Input
    action="click"
    className="ant-input-password"
    disabled={false}
    prefixCls="ant-input"
    suffix={
      <Icon
        className="ant-input-password-icon"
        onClick={[Function]}
        type="eye-invisible"
      />
    }
    type="text"
  >
    <Consumer>
      <span
        className="ant-input-password ant-input-affix-wrapper"
      >
        <input
          action="click"
          className="ant-input"
          disabled={false}
          onChange={[Function]}
          onKeyDown={[Function]}
          style={null}
          type="text"
          value="111"
        />
        <span
          className="ant-input-suffix"
        >
          <Icon
            className="ant-input-password-icon"
            key="passwordIcon"
            onClick={[Function]}
            type="eye-invisible"
          >
            <LocaleReceiver
              componentName="Icon"
            >
              <i
                aria-label="icon: eye-invisible"
                className="anticon anticon-eye-invisible ant-input-password-icon"
                onClick={[Function]}
                tabIndex={-1}
              >
                <svg
                  aria-hidden="true"
                  className=""
                  fill="currentColor"
                  focusable="false"
                  height="1em"
                  width="1em"
                >
                  <use
                    xlinkHref="#eye-invisible"
                  />
                </svg>
              </i>
            </LocaleReceiver>
          </Icon>
        </span>
      </span>
    </Consumer>
  </Input>
</Password>
`;

exports[`Input.Password should change type when click 3`] = `
<Password
  action="click"
  inputPrefixCls="ant-input"
  prefixCls="ant-input-password"
  visibilityToggle={true}
>
  <Input
    action="click"
    className="ant-input-password"
    disabled={false}
    prefixCls="ant-input"
    suffix={
      <Icon
        className="ant-input-password-icon"
        onClick={[Function]}
        type="eye"
      />
    }
    type="password"
  >
    <Consumer>
      <span
        className="ant-input-password ant-input-affix-wrapper"
      >
        <input
          action="click"
          className="ant-input"
          disabled={false}
          onChange={[Function]}
          onKeyDown={[Function]}
          style={null}
          type="password"
          value="111"
        />
        <span
          className="ant-input-suffix"
        >
          <Icon
            className="ant-input-password-icon"
            key="passwordIcon"
            onClick={[Function]}
            type="eye"
          >
            <LocaleReceiver
              componentName="Icon"
            >
              <i
                aria-label="icon: eye"
                className="anticon anticon-eye ant-input-password-icon"
                onClick={[Function]}
                tabIndex={-1}
              >
                <svg
                  aria-hidden="true"
                  className=""
                  fill="currentColor"
                  focusable="false"
                  height="1em"
                  width="1em"
                >
                  <use
                    xlinkHref="#eye"
                  />
                </svg>
              </i>
            </LocaleReceiver>
          </Icon>
        </span>
      </span>
    </Consumer>
  </Input>
</Password>
`;

exports[`Input.Search should support suffix 1`] = `
<Search
  enterButton={false}
  suffix="suffix"
>
  <Consumer>
    <Input
      className="ant-input-search"
      disabled={false}
      onPressEnter={[Function]}
      prefixCls="ant-input"
      suffix={
        Array [
          "suffix",
          <Icon
            className="ant-input-search-icon"
            onClick={[Function]}
            type="search"
          />,
        ]
      }
      type="text"
    >
      <Consumer>
        <span
          className="ant-input-search ant-input-affix-wrapper"
        >
          <input
            className="ant-input"
            disabled={false}
            onChange={[Function]}
            onKeyDown={[Function]}
            style={null}
            type="text"
            value=""
          />
          <span
            className="ant-input-suffix"
          >
            suffix
            <Icon
              className="ant-input-search-icon"
              key="searchIcon"
              onClick={[Function]}
              type="search"
            >
              <LocaleReceiver
                componentName="Icon"
              >
                <i
                  aria-label="icon: search"
                  className="anticon anticon-search ant-input-search-icon"
                  onClick={[Function]}
                  tabIndex={-1}
                >
                  <svg
                    aria-hidden="true"
                    className=""
                    fill="currentColor"
                    focusable="false"
                    height="1em"
                    width="1em"
                  >
                    <use
                      xlinkHref="#search"
                    />
                  </svg>
                </i>
              </LocaleReceiver>
            </Icon>
          </span>
        </span>
      </Consumer>
    </Input>
  </Consumer>
</Search>
`;

exports[`TextArea should support disabled 1`] = `
<TextArea
  disabled={true}
>
  <Consumer>
    <textarea
      className="ant-input ant-input-disabled"
      disabled={true}
      onChange={[Function]}
      onKeyDown={[Function]}
      style={Object {}}
    />
  </Consumer>
</TextArea>
`;

exports[`TextArea should support maxLength 1`] = `
<TextArea
  maxLength={10}
>
  <Consumer>
    <textarea
      className="ant-input"
      maxLength={10}
      onChange={[Function]}
      onKeyDown={[Function]}
      style={Object {}}
    />
  </Consumer>
</TextArea>
`;
